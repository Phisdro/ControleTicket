unit UDMControle;

interface

uses
  System.SysUtils, System.Classes, Data.DBXInterbase, Data.SqlExpr,
  IBX.IBCustomDataSet, IBX.IBUpdateSQL, Data.DB, IBX.IBTable, IBX.IBDatabase,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf,
  FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async,
  FireDAC.Phys, FireDAC.Phys.FB, FireDAC.Phys.FBDef, FireDAC.VCLUI.Wait,
  FireDAC.Comp.Client, RegularExpressions, FMX.Dialogs;

type
  TDMControle = class(TDataModule)
    Banco: TIBDatabase;
    Secao: TIBTransaction;
    dsFuncionario: TDataSource;
    tbFuncionario: TIBTable;
    updFuncionario: TIBUpdateSQL;
    Conexao: TFDConnection;
    tbFuncionarioID: TIntegerField;
    tbFuncionarioCPF: TIBStringField;
    tbFuncionarioNOME: TIBStringField;
    tbFuncionarioSITUACAO: TIBStringField;
    tbFuncionarioDATA_ALTERACAO: TDateTimeField;
    procedure tbFuncionarioBeforePost(DataSet: TDataSet);
    procedure tbFuncionarioCPFValidate(Sender: TField);
    function validaCPF(cpf: string): Boolean;
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  DMControle: TDMControle;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

procedure TDMControle.tbFuncionarioBeforePost(DataSet: TDataSet);
begin
  TBFuncionarioDATA_ALTERACAO.AsDateTime := now;
end;

function TDMControle.validaCPF(cpf: string): Boolean;
var
  dig10, dig11: string;
  s, i, r, peso: integer;
  matchCpf: TMatch;
  flagcpf: Boolean;
begin
  flagcpf := true;
// length - retorna o tamanho da string (CPF é um número formado por 11 dígitos)
//  if ((CPF = '00000000000') or (CPF = '11111111111') or
//      (CPF = '22222222222') or (CPF = '33333333333') or
//      (CPF = '44444444444') or (CPF = '55555555555') or
//      (CPF = '66666666666') or (CPF = '77777777777') or
//      (CPF = '88888888888') or (CPF = '99999999999') or
//      (length(CPF) <> 11))
//     then begin
//              validaCPF := false;
//              exit;
//            end;
//  reCpf.Create(cpf);
  //flagcpf := TRegEx.IsMatch(cpf,'^(?!(\d)\1{10})$');

  if (TRegEx.IsMatch(cpf,'^(?!(\d)\1{10})$')) then
  begin
     ShowMessage('ismatch');
     validaCPF := false;
     exit;
  end;

// try - protege o código para eventuais erros de conversão de tipo na função StrToInt
//  try
//{ *-- Cálculo do 1o. Digito Verificador --* }
//    s := 0;
//    peso := 10;
//    for i := 1 to 9 do
//    begin
//// StrToInt converte o i-ésimo caractere do CPF em um número
//      s := s + (StrToInt(CPF[i]) * peso);
//      peso := peso - 1;
//    end;
//    r := 11 - (s mod 11);
//    if ((r = 10) or (r = 11))
//       then dig10 := '0'
//    else str(r:1, dig10); // converte um número no respectivo caractere numérico
//
//{ *-- Cálculo do 2o. Digito Verificador --* }
//    s := 0;
//    peso := 11;
//    for i := 1 to 10 do
//    begin
//      s := s + (StrToInt(CPF[i]) * peso);
//      peso := peso - 1;
//    end;
//    r := 11 - (s mod 11);
//    if ((r = 10) or (r = 11))
//       then dig11 := '0'
//    else str(r:1, dig11);
//
//{ Verifica se os digitos calculados conferem com os digitos informados. }
//    if ((dig10 = CPF[10]) and (dig11 = CPF[11]))
//       then validaCPF := true
//    else validaCPF := false;
//  except
//    validaCPF := false
//  end;
end;

procedure TDMControle.tbFuncionarioCPFValidate(Sender: TField);
begin
  showmessage('1');
  validaCPF(Sender.AsString);
  showmessage('2');
end;

end.
