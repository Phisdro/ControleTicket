unit UDMControleTicket;

interface

uses
  System.SysUtils, System.Classes, Data.DBXInterbase, Data.SqlExpr,
  IBX.IBCustomDataSet, IBX.IBUpdateSQL, Data.DB, IBX.IBTable, IBX.IBDatabase,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf,
  FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async,
  FireDAC.Phys, FireDAC.Phys.FB, FireDAC.Phys.FBDef, FireDAC.VCLUI.Wait,
  FireDAC.Comp.Client, RegularExpressions, Vcl.Dialogs, System.UITypes,
  IBX.IBQuery, IBX.IBSQL, FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf,
  FireDAC.DApt, FireDAC.Phys.SQLiteVDataSet, FireDAC.Comp.DataSet;

type
  TDMControle = class(TDataModule)
    Banco: TIBDatabase;
    Conexao: TFDConnection;
    Secao: TFDTransaction;
    fdqTicketFuncionario: TFDQuery;
    dsTicketFuncionario: TDataSource;
    fdqTicketFuncionarioID: TIntegerField;
    fdqTicketFuncionarioQUANTIDADE: TIntegerField;
    fdqTicketFuncionarioSITUACAO: TWideStringField;
    fdqTicketFuncionarioDATA_ENTREGA: TSQLTimeStampField;
    dsFuncionario: TDataSource;
    fdqFuncionario: TFDQuery;
    fdqFuncionarioID: TIntegerField;
    fdqFuncionarioNOME: TWideStringField;
    fdqFuncionarioCPF: TWideStringField;
    fdqFuncionarioSITUACAO: TWideStringField;
    fdqFuncionarioDATA_ALTERACAO: TSQLTimeStampField;
    fdqTicketFuncionarioFUNCIONARIO: TIntegerField;
    Consulta: TFDQuery;
    fdqRelatorio: TFDQuery;
    dsRelatorio: TDataSource;
    function validaCPF(cpf: string): Boolean;
    function validaNome(nome: String): Boolean;
    procedure fdqFuncionarioCPFValidate(Sender: TField);
    procedure fdqFuncionarioNOMEValidate(Sender: TField);
    procedure fdqFuncionarioBeforePost(DataSet: TDataSet);
    procedure fdqFuncionarioSITUACAOGetText(Sender: TField; var Text: string;
      DisplayText: Boolean);
    procedure fdqTicketFuncionarioFUNCIONARIOGetText(Sender: TField;
      var Text: string; DisplayText: Boolean);
    procedure fdqTicketFuncionarioSITUACAOGetText(Sender: TField;
      var Text: string; DisplayText: Boolean);
    procedure fdqTicketFuncionarioNewRecord(DataSet: TDataSet);
    procedure fdqFuncionarioAfterScroll(DataSet: TDataSet);
    procedure fdqTicketFuncionarioBeforePost(DataSet: TDataSet);
    procedure fdqTicketFuncionarioAfterScroll(DataSet: TDataSet);
    procedure fdqFuncionarioNewRecord(DataSet: TDataSet);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  DMControle: TDMControle;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

uses UControleTicket;

{$R *.dfm}

procedure TDMControle.fdqFuncionarioAfterScroll(DataSet: TDataSet);
begin
//desabilita o campo SITUACAO da tabela FUNCIONARIO para novos cadastros
  if not(fdqFuncionarioID.AsString.IsEmpty) then
    fdqFuncionarioSITUACAO.ReadOnly := True;
end;

procedure TDMControle.fdqTicketFuncionarioAfterScroll(DataSet: TDataSet);
begin
//desabilita o campo SITUACAO da tabela TICKETFUNCIONARIO para novos cadastros
  if not(fdqTicketFuncionarioID.AsString.IsEmpty) then
    fdqTicketFuncionarioSITUACAO.ReadOnly := False;
end;

procedure TDMControle.fdqFuncionarioBeforePost(DataSet: TDataSet);
begin
  if Trim(fdqFuncionarioNOME.AsString).IsEmpty then
  begin
    MessageDlg('Atenção!'+#10+#10+'O campo Nome é Obrigatório!',TMsgDlgType.mtCustom,mbOKCancel,0);
    abort;
  end;

  if Trim(fdqFuncionarioCPF.AsString).IsEmpty then
  begin
    MessageDlg('Atenção!'+#10+#10+'O campo CPF é Obrigatório!',TMsgDlgType.mtCustom,mbOKCancel,0);
    abort;
  end;
end;

procedure TDMControle.fdqTicketFuncionarioBeforePost(DataSet: TDataSet);
begin
  if Trim(fdqTicketFuncionarioFUNCIONARIO.AsString).IsEmpty then
  begin
    MessageDlg('Atenção!'+#10+#10+'O campo Funcionário é Obrigatório!',TMsgDlgType.mtCustom,mbOKCancel,0);
    abort;
  end;
end;

procedure TDMControle.fdqFuncionarioNOMEValidate(Sender: TField);
begin
  if not(validaNome(Sender.AsString)) then
  begin
    MessageDlg('Nome Inválido!'+#10+#10+'É Obrigatório Informar o Nome Completo',TMsgDlgType.mtCustom,mbOKCancel,0);
    fdqFuncionarioNOME.FocusControl;
    Abort;
  end;
end;

procedure TDMControle.fdqFuncionarioCPFValidate(Sender: TField);
begin
  if (Length(Sender.AsString) < 11) then
  begin
    MessageDlg('CPF Inválido!'+#10+#10+'O CPF deve conter 11 digitos',TMsgDlgType.mtCustom,mbOKCancel,0);
    fdqFuncionarioCPF.FocusControl;
    Abort;
  end;

  if not(validaCPF(Sender.AsString)) then
  begin
    MessageDlg('CPF Inválido!'+#10+#10+'O CPF informado não é válido',TMsgDlgType.mtCustom,mbOKCancel,0);
    fdqFuncionarioCPF.FocusControl;
    Abort;
  end;
end;

procedure TDMControle.fdqFuncionarioNewRecord(DataSet: TDataSet);
begin
  fdqFuncionarioSITUACAO.ReadOnly := False;
  fdqFuncionarioSITUACAO.Value := 'A';
  fdqFuncionarioSITUACAO.ReadOnly := True;
  fdqFuncionarioDATA_ALTERACAO.AsDateTime := now;
end;

procedure TDMControle.fdqTicketFuncionarioNewRecord(DataSet: TDataSet);
begin
  fdqTicketFuncionarioSITUACAO.ReadOnly := False;
  fdqTicketFuncionarioSITUACAO.Value := 'A';
  fdqTicketFuncionarioSITUACAO.ReadOnly := True;
  fdqTicketFuncionarioDATA_ENTREGA.AsDateTime := now;
end;

procedure TDMControle.fdqFuncionarioSITUACAOGetText(Sender: TField;
  var Text: string; DisplayText: Boolean);
begin
//ajusta a descricao do campo situacao
  Text := Sender.AsString;
  if(Text = 'A')then
    Text := 'Ativo'
  else if(Text = 'I')then
    Text := 'Inativo';
end;

procedure TDMControle.fdqTicketFuncionarioSITUACAOGetText(Sender: TField;
  var Text: string; DisplayText: Boolean);
begin
//ajusta a descricao do campo situacao
  Text := Sender.AsString;
  if(Text = 'A')then
    Text := 'Ativo'
  else if(Text = 'I')then
    Text := 'Inativo';
end;

procedure TDMControle.fdqTicketFuncionarioFUNCIONARIOGetText(Sender: TField;
  var Text: string; DisplayText: Boolean);
begin
//Busca pelo id e exibe o nome do funcionario no campo FUNCIONARIO do grid da aba ticket
  Consulta.SQL.Clear;
  consulta.SQL.Add('SELECT F.ID||'' - ''||F.NOME '+#10+
                   'FROM FUNCIONARIO F '+#10+
                   'WHERE F.ID = :ID');
  consulta.ParamByName('ID').AsInteger := Sender.AsInteger;
  consulta.Open;
  Text := consulta.Fields[0].AsString;
end;

function TDMControle.validaCPF(cpf: string): Boolean;
var
  dig10, dig11: string;
  s, i, r, peso: integer;
begin
// Verifica se o CPF é formado por 11 numeros repetidos
  if (TRegEx.IsMatch(cpf,'(\d)\1{10}')) then
  begin
    validaCPF := false;
    exit;
  end;

  try
{ *-- Cálculo do 1o. Digito Verificador --* }
    s := 0;
    peso := 10;
    for i := 1 to 9 do
    begin
      s := s + (StrToInt(CPF[i]) * peso);
      peso := peso - 1;
    end;
    r := 11 - (s mod 11);
    if ((r = 10) or (r = 11))
       then dig10 := '0'
    else str(r:1, dig10);

{ *-- Cálculo do 2o. Digito Verificador --* }
    s := 0;
    peso := 11;
    for i := 1 to 10 do
    begin
      s := s + (StrToInt(CPF[i]) * peso);
      peso := peso - 1;
    end;
    r := 11 - (s mod 11);
    if ((r = 10) or (r = 11))
       then dig11 := '0'
    else str(r:1, dig11);

{ Verifica se os digitos calculados conferem com os digitos informados. }
    if ((dig10 = CPF[10]) and (dig11 = CPF[11]))
       then validaCPF := true
    else validaCPF := false;
  except
    validaCPF := false
  end;
end;

function TDMControle.validaNome(nome: string): Boolean;
begin
  // verifica se o nome é composto por uma palavra de 3 carateres ou mais e
  // 1 ou mais espaços seguido por 1 ou mais caracteres
  if (TRegEx.IsMatch(nome,'.{3,}\h+.+')) then
    validaNome := true
  else
    validaNome := false;
end;

end.
